// Autogenerated, DO NOT EDIT
package main

import "net/http"
import "io"
import "fmt"
import "encoding/json"
import "strconv"

func (h *MyApi) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	switch r.URL.Path {
	case "/user/profile":
		var str string
		params := ProfileParams{}
		str = r.FormValue("login")
		if str == "" {
			w.WriteHeader(http.StatusBadRequest)
			io.WriteString(w, `{"error": "login must me not empty"}`)
			return
		}
		params.Login = str
		res, err := h.Profile(r.Context(), params)
		if err != nil {
			apiErr, ok := err.(ApiError)
			if ok {
				w.WriteHeader(apiErr.HTTPStatus)
				fmt.Fprintf(w, `{"error": %q}`, apiErr.Error())
			} else {
				w.WriteHeader(http.StatusInternalServerError)
				fmt.Fprintf(w, `{"error": %q}`, err.Error())
			}
			return
		}
		jsonBytes, _ := json.Marshal(res)
		io.WriteString(w, `{"error":"", "response": `)
		w.Write(jsonBytes)
		io.WriteString(w, `}`)
	case "/user/create":
		if r.Method != "POST" {
			w.WriteHeader(http.StatusNotAcceptable)
			io.WriteString(w, `{"error": "bad method"}`)
			return
		}
		if r.Header.Get("X-Auth") != "100500" {
			w.WriteHeader(http.StatusForbidden)
			io.WriteString(w, `{"error": "unauthorized"}`)
			return
		}
		var str string
		params := CreateParams{}
		str = r.FormValue("login")
		if str == "" {
			w.WriteHeader(http.StatusBadRequest)
			io.WriteString(w, `{"error": "login must me not empty"}`)
			return
		}
		if len(str) < 10 {
			w.WriteHeader(http.StatusBadRequest)
			io.WriteString(w, `{"error": "login len must be >= 10"}`)
			return
		}
		params.Login = str
		str = r.FormValue("full_name")
		params.Name = str
		str = r.FormValue("status")
		if str == "" {
			str = "user"
		}
		if true && str != "user" && str != "moderator" && str != "admin" {
			w.WriteHeader(http.StatusBadRequest)
			io.WriteString(w, `{"error": "status must be one of [user, moderator, admin]"}`)
			return
		}
		params.Status = str
		str = r.FormValue("age")
		intVal, err := strconv.Atoi(str)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			io.WriteString(w, `{"error": "age must be int"}`)
			return
		}
		if intVal < 0 {
			w.WriteHeader(http.StatusBadRequest)
			io.WriteString(w, `{"error": "age must be >= 0"}`)
			return
		}
		if intVal > 128 {
			w.WriteHeader(http.StatusBadRequest)
			io.WriteString(w, `{"error": "age must be <= 128"}`)
			return
		}
		params.Age = intVal
		res, err := h.Create(r.Context(), params)
		if err != nil {
			apiErr, ok := err.(ApiError)
			if ok {
				w.WriteHeader(apiErr.HTTPStatus)
				fmt.Fprintf(w, `{"error": %q}`, apiErr.Error())
			} else {
				w.WriteHeader(http.StatusInternalServerError)
				fmt.Fprintf(w, `{"error": %q}`, err.Error())
			}
			return
		}
		jsonBytes, _ := json.Marshal(res)
		io.WriteString(w, `{"error":"", "response": `)
		w.Write(jsonBytes)
		io.WriteString(w, `}`)
	default:
		// 404
		w.WriteHeader(http.StatusNotFound)
		io.WriteString(w, `{"error": "unknown method"}`)
	}
}

func (h *OtherApi) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	switch r.URL.Path {
	case "/user/create":
		if r.Method != "POST" {
			w.WriteHeader(http.StatusNotAcceptable)
			io.WriteString(w, `{"error": "bad method"}`)
			return
		}
		if r.Header.Get("X-Auth") != "100500" {
			w.WriteHeader(http.StatusForbidden)
			io.WriteString(w, `{"error": "unauthorized"}`)
			return
		}
		var str string
		params := OtherCreateParams{}
		str = r.FormValue("username")
		if str == "" {
			w.WriteHeader(http.StatusBadRequest)
			io.WriteString(w, `{"error": "username must me not empty"}`)
			return
		}
		if len(str) < 3 {
			w.WriteHeader(http.StatusBadRequest)
			io.WriteString(w, `{"error": "username len must be >= 3"}`)
			return
		}
		params.Username = str
		str = r.FormValue("account_name")
		params.Name = str
		str = r.FormValue("class")
		if str == "" {
			str = "warrior"
		}
		if true && str != "warrior" && str != "sorcerer" && str != "rouge" {
			w.WriteHeader(http.StatusBadRequest)
			io.WriteString(w, `{"error": "class must be one of [warrior, sorcerer, rouge]"}`)
			return
		}
		params.Class = str
		str = r.FormValue("level")
		intVal, err := strconv.Atoi(str)
		if err != nil {
			w.WriteHeader(http.StatusBadRequest)
			io.WriteString(w, `{"error": "level must be int"}`)
			return
		}
		if intVal < 1 {
			w.WriteHeader(http.StatusBadRequest)
			io.WriteString(w, `{"error": "level must be >= 1"}`)
			return
		}
		if intVal > 50 {
			w.WriteHeader(http.StatusBadRequest)
			io.WriteString(w, `{"error": "level must be <= 50"}`)
			return
		}
		params.Level = intVal
		res, err := h.Create(r.Context(), params)
		if err != nil {
			apiErr, ok := err.(ApiError)
			if ok {
				w.WriteHeader(apiErr.HTTPStatus)
				fmt.Fprintf(w, `{"error": %q}`, apiErr.Error())
			} else {
				w.WriteHeader(http.StatusInternalServerError)
				fmt.Fprintf(w, `{"error": %q}`, err.Error())
			}
			return
		}
		jsonBytes, _ := json.Marshal(res)
		io.WriteString(w, `{"error":"", "response": `)
		w.Write(jsonBytes)
		io.WriteString(w, `}`)
	default:
		// 404
		w.WriteHeader(http.StatusNotFound)
		io.WriteString(w, `{"error": "unknown method"}`)
	}
}
