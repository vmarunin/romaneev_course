{{- /* 
    Template for generation api go code
*/ -}}
// Autogenerated, DO NOT EDIT
package {{.PackageName}};

import "net/http"
import "io"
import "fmt"
import "encoding/json"
import "strconv"

{{ $paramsMap := .Params -}}
{{ range $structName, $handlersList := .Handlers }}
func (h *{{- $structName -}}) ServeHTTP(w http.ResponseWriter, r *http.Request) {
    switch r.URL.Path {
    {{ range $handler := $handlersList -}}
    case "{{- $handler.Url -}}":
        {{ if $handler.HTTPMethod -}}
        if r.Method != {{ $handler.HTTPMethod | printf "%q"}} {
            w.WriteHeader(http.StatusNotAcceptable)
            io.WriteString(w, `{"error": "bad method"}`)
            return
        }
        {{ end -}}
        {{ if $handler.Auth -}}
        if r.Header.Get("X-Auth") != "100500" {
            w.WriteHeader(http.StatusForbidden)
            io.WriteString(w, `{"error": "unauthorized"}`)
            return
        }
        {{ end -}}

        var str string
        params := {{ $handler.ParamType -}}{}
        {{ range $field := (index $paramsMap $handler.ParamType).Fields -}}
            str = r.FormValue({{ $field.ParamName | printf "%q"}})
            {{ if $field.IsRequired -}}
            if str == "" {
                w.WriteHeader(http.StatusBadRequest)
                io.WriteString(w, `{"error": "{{$field.ParamName}} must me not empty"}`)
                return
            }
            {{ end -}}
            {{ if $field.IsDefault -}}
            if str == "" {
                str = {{$field.Default |  printf "%q"}}
            }
            {{ end -}}
            {{ if $field.IsEnum -}}
            if true 
                {{- range $ev := $field.Enum -}}
                {{- " && str!=" -}}
                {{- $ev | printf "%q" -}}
                {{- end -}}
                {
                    w.WriteHeader(http.StatusBadRequest)
                    io.WriteString(w, `{"error": "{{$field.ParamName}} must be one of [{{ StringsJoin $field.Enum ", " }}]"}`)
                    return
                }
            {{ end -}}
            {{ if (eq $field.ParamType "string") -}}
                {{ if $field.IsMin -}}
                if len(str) <  {{ $field.Min}} {
                    w.WriteHeader(http.StatusBadRequest)
                    io.WriteString(w, `{"error": "{{$field.ParamName}} len must be >= {{ $field.Min }}"}`)
                    return
                }
                {{ end -}}
            params.{{- $field.Name }} = str
            {{ else -}}
                intVal, err := strconv.Atoi(str)
                if err != nil {
                    w.WriteHeader(http.StatusBadRequest)
                    io.WriteString(w, `{"error": "{{$field.ParamName}} must be int"}`)
                    return
                }
                {{ if $field.IsMin -}}
                if intVal <  {{ $field.Min}} {
                    w.WriteHeader(http.StatusBadRequest)
                    io.WriteString(w, `{"error": "{{$field.ParamName}} must be >= {{ $field.Min }}"}`)
                    return
                }
                {{ end -}}
                {{ if $field.IsMax -}}
                if intVal >  {{ $field.Max}} {
                    w.WriteHeader(http.StatusBadRequest)
                    io.WriteString(w, `{"error": "{{$field.ParamName}} must be <= {{ $field.Max }}"}`)
                    return
                }
                {{ end -}}
            params.{{- $field.Name }} = intVal
            {{ end -}}
        {{ end -}}

        res, err := h.{{- $handler.MethodName -}}(r.Context(), params);
        if err != nil {
            apiErr, ok := err.(ApiError)
            if ok {
                w.WriteHeader(apiErr.HTTPStatus)
                fmt.Fprintf(w, `{"error": %q}`, apiErr.Error())
            } else {
                w.WriteHeader(http.StatusInternalServerError)
                fmt.Fprintf(w, `{"error": %q}`, err.Error())
            }
            return
        }
        jsonBytes,_ := json.Marshal(res)
        io.WriteString(w, `{"error":"", "response": `)
        w.Write(jsonBytes)
        io.WriteString(w, `}`)
    {{ end -}}
    default:
        // 404
        w.WriteHeader(http.StatusNotFound)
        io.WriteString(w, `{"error": "unknown method"}`)
    }
}
{{ end }}